<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>

  <!-- Configuración del SessionFactory, punto de entrada para las sesiones de Hibernate -->
  <session-factory>

    <!-- Configuración de conexión a la base de datos -->
    <property name="connection.url">
      <!-- URL de conexión a la base de datos MySQL -->
      jdbc:mysql://localhost:3306/todolist?serverTimezone=UTC
    </property>

    <property name="connection.driver_class">
      <!-- Driver JDBC para MySQL -->
      com.mysql.cj.jdbc.Driver
    </property>

    <property name="connection.username">
      <!-- Nombre de usuario para la base de datos -->
      root
    </property>

    <!-- Es recomendable no almacenar contraseñas en el código, usar variables de entorno o un archivo de configuración separado -->
    <property name="connection.password">
      <!-- Contraseña de la base de datos -->
      Admin
    </property>

    <!-- Dialecto que Hibernate usará para generar las sentencias SQL específicas para MySQL -->
    <property name="dialect">
      org.hibernate.dialect.MySQLDialect
    </property>

    <!-- Configuración para mostrar las sentencias SQL generadas -->
    <property name="show_sql">
      true
    </property>

    <!-- Formatea las sentencias SQL generadas para mayor claridad en los logs -->
    <property name="format_sql">
      true
    </property>

    <!-- Configura el contexto de sesión actual. 'thread' significa que la sesión está asociada a cada hilo -->
    <property name="current_session_context_class">
      thread
    </property>

    <!-- Estrategia de validación del esquema de la base de datos -->
    <property name="hibernate.hbm2ddl.auto">
      validate
    </property>

    <!--
      Las opciones posibles son:
      - validate: Hibernate valida que el esquema de la base de datos coincida con las entidades (sin modificar la base de datos).
      - update: Hibernate actualiza el esquema de la base de datos si detecta cambios en las entidades.
      - create: Hibernate crea el esquema de la base de datos desde cero (puede borrar datos existentes).
      - create-drop: Similar a create, pero elimina el esquema al finalizar la sesión de la aplicación.
    -->

    <!-- Mapeo de las clases de entidad que Hibernate debe gestionar -->
    <mapping class="modelo.CompraComida"/>
    <mapping class="modelo.ComprarVarios"/>
    <mapping class="modelo.CompraLimpieza"/>

  </session-factory>
</hibernate-configuration>
